    const user = await modelsFactory.userModel.findById(req.body.creator_id)

    if (!user) {
        return res.status(404).send('User does not exist')
    }

    const organization = await modelsFactory.organizationModel.findById(req.body.organization_id)

    if (!organization) {
        return res.status(404).send('Organization does not exist')
    }
    .catch((err: Error) => {
                console.error("DB connection unsuccessful", err)
                throw err
            })

export default interface BaseAttributes {
    id?: number
}

export interface Attributes extends BaseAttributes { //optional
    id?: number,
    name: string
}

interface Attributes2 {
    id: number,
    name: string
}

export type Instance2 = Sequelize.Instance<Attributes2> & Attributes2

            afterSave: (user: Instance): Instance2 => {
                if (user.id) {
                    return user
                }
                throw new Error()
            },

            interface BaseAttributes2 {
    id: number
}

interface BaseAttributes3 {
    wow: number
}

type BaseInstance = Sequelize.Instance<BaseAttributes> & BaseAttributes
type BaseInstance2 = Sequelize.Instance<BaseAttributes2> & BaseAttributes2

export default class Factory {

    static validateHasId(instance: BaseInstance) {
        if (!instance.id) {
            throw new Error()
        }

        return instance
    }

    interface BaseAttributes {
    id?:number
}
type BaseInstance = Sequelize.Instance<BaseAttributes> & BaseAttributes

export default class Factory {

    static validateHasId<T extends BaseInstance>(instance: T) {
        if (!instance.id) {
            throw new Error()
        }

        return instance
    }

    ---

    const options = Object.assign({}, dbOptions, {
    instanceMethods: {
        getId: (instance: Instance)
    }
})

export interface Instance extends Sequelize.Instance<Attributes>, Attributes{
    getId: number
}

export function getId<T extends BaseInstance>(instance: T) {
    if (!instance.id) {
        throw new TypeError(`no instance id on ${instance.Model.name}`)
    }

    return instance.id
}

export function getId (instance: BaseInstance): number {
    if (!instance.id) {
        throw new TypeError(`no instance id on ${instance.Model.name}`)
    }

    return instance.id
}
    model.Instance.prototype.getId = getId.bind(null, model.Instance)


export type Instance = Sequelize.Instance<Attributes> & Attributes & A

type B = Attributes & A
function d (a: B) {
    a.getId(1)
}
d({name: 's'})


    //model.Instance().getId = (id: number|undefined) => 1

 (organization: Definition.OrganizationInstance) => {
                if (organization.changed('id')) {
                    throw new Error('cannot change id of organization')
                }
            },
            beforeUpdate: (organization: Definition.OrganizationInstance) => {
                if (organization.changed('id')) {
                    throw new Error('cannot change id of organization')
                }
            },

                    it.only('Should throw error on invalid id update', async () => {
            let error
            
            try {
                await survey.update({id: 123})
            } catch (err) {
                error = err
            }

            expect(error).to.exist
        })


function beforeValidate (instance: BaseInstance): void {
    if (instance.changed('id')) {
        throw new Error(`cannot updated id on ${instance.Model.name}`)
    }
}

const pRequest = util.promisify(request.post)
        
       const b= pRequest({
            url:'http://localhost:3000/users',
            method: 'POST',
            body: {name: 'a'},
            json: true
        })


export * from './surveys'
export * from './users'
export * from './members'
export * from './organizations'
export * from './member_survey_permissions'

 type User = {id: number, name: string, createdAt: string, updatedAt: string, deletedAt: null}


export function sendResponseFn(
    req: Express.Request, res: Express.Response, next: Function
) {
    res.json
}

    // if (Errors.BaseError.isPrototypeOf(error)) {
    //     return res.status(error.statusCode).json(errorJson)
    // }

const f = NotFoundError.bind(NotFoundError, 's')
const a = new f(1)

        type User = {id: number} //imperfect
        let user: User

        import Express from 'express';

export interface Express.Request extends Express.Request {
    is_auth_required: boolean
    auth?: Object
}

export interface Express.RequestHandler extends Express.RequestHandler {
    (req: Express.Request, res: Express.Response, next: Function): any;
}

export interface Express.RequestErrorHandler extends Express.ErrorRequestHandler {
    (err: any, req: Express.Request, res: Express.Response, next: Function): any;
}

export interface IExpress extends Express.Express {
    RequestErrorHandler: Express.RequestErrorHandler
}

export function parseOrganizationToken(req: Express.Request, res: Express.Response, next: Function) {     
    if (!req.auth) {
        throw new Errors.UnauthorizedError('token not provided')
    }
    if (!req.auth.organization_id) {
        throw new Errors.UnauthorizedError('improper token provided') 
    }

    return 
}

type UserAuth = {
    id: number
}
type MemberAuth = UserAuth & {
    organization_id: number
}

    checkRequiredAuth(auth: Auth) {     
        throw new Errors.UnauthorizedError()
    }